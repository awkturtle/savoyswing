<?php
// $Id$

 /**
 * Show the help;
 **/
function people_help($path, $arg) {
  $output = '';
  switch ($path) {
    case "admin/help#people":
      $output  = "<p>";
      $output .= t("A module for linking drupal user accounts to more detailed records");
      $output .="</p>";
      break;
    case "admin/people":
      $output  = "<h3>" . t("People") . "</h3>";
      $output .= "<p>";
      $output .= t("The people module links records of people to other information, such as their drupal login and membership accounts.");
      $output .= "</p>";
      break;
    case "admin/people/search":
      $output  = "<p>";
      $output .= t("Use the commands below to search for people in our system.  Remember, they may not have a user account on our website.");
      $output .= "</p>";
      break;
    
    }
 
  return $output;
} // function people_help



/**
* Valid permissions for this module
* @return array An array of valid permissions for the people module
**/
function people_perm() {
  return array('view people', 'edit people', 'administrate people');
} // function people_perm



/**
* Implementation of hook_block
* @param string $op one of "list", "view", "save" and "configure"
* @param integer $delta code to identify the block
* @param array $edit only for "save" operation
**/
function people_block($op = 'list', $delta = 0, $edit = array()) { 
  if ($op == "list") {
    // Generate listing of blocks from this module, for the admin/block page
    $block = array();
    $block[0]["info"] = t('A block belonging to the people module');
    return $block;
  }
  else if ($op == "view") {
    $block = array();
    $block['content'] = "Content of the block";
    $block['subject'] = "People Subject";
    return $block;
  }
} // function people_block



/**
 * Implementation of hook_menu
 **/

function people_menu() {

  $items = array();

  $items['admin/people/settings'] = array(
    'title' => 'Settings',
    'description' => 'Settings relating to the people module such as max records per page',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('people_admin_settings'),
    'access arguments' => array('edit people'),
    'type' => MENU_NORMAL_ITEM,
   );

  $items['admin/people/search'] = array(
    'title' => 'Search',
    'description' => 'Administrate people stored in the system (who may or may not have user accounts on the website!)',
    'page callback' => 'people_admin_search',
    'access arguments' => array('view people'),
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/people'] = array(
    'title' => 'People management',
    'description' => 'Administrate people stored in the system (who may or may not have user accounts on the website!)',
    'page callback' => 'people_admin_root',
    'access arguments' => array('edit people'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
} // function people_menu

function people_admin_search() {
  $output = "";

  // Table Header
  $headers = array(
		   'Last Name',
		   'First Name',
		   'Login',
		   'Credit',
		   'Address',
		   'Phone',
		   'Email',
		   'Member?',
		   );
  
  // Table Rows
  $username = $user->login;
  $page = isset( $_GET["page"] ) ? intval($_GET["page"]) - 1 : 0;
  $per_page = variable_get("people_maxdisp_$username", 50);
  $offset   = $page * $per_page;

  if (module_exists('members')) {
    $query = "
        SELECT up.last_name, up.first_name, up.login, up.credit, up.address, up.city, up.phone, up.email, IFNULL( DATE(now()) < m.expiration_date, 0 ) as member FROM
             ( SELECT p.id, p.last_name, p.first_name, u.login, p.credit, p.address, p.city, p.phone, p.email
       	       FROM {users} u RIGHT JOIN {people} p ON u.uid = p.user_id ORDER BY p.last_name LIMIT $offset, $per_page) up LEFT JOIN {members} m ON m.person_id = up.id";
  }

  else {
    $query = "
        SELECT p.last_name, p.first_name, u.login, p.credit, p.address, p.city, p.phone, p.email
        FROM {users} u RIGHT JOIN {people} p ON u.uid = p.user_id ORDER BY p.last_name LIMIT $offset, $per_page";
  }
  
  $result = db_query( $query );
  $assoc = array();
  while( $assoc_row = db_fetch_array($result) ) {
    $assoc[] = $assoc_row;
  }
  
  $rows = people_tablize_rows($assoc, $headers);
  
  // Render Table
  return $output . theme('table', $headers, $rows, array("style" => "font-size: 0.85em;"));
} // function people_admin_search

/**
 * Takes an array of rows and arranges the cells in the same order as headers
 **/
function people_tablize_rows($rows, $headers) {
  // trim the headers, strip punctuations, convert spaces to underscores
  array_walk($headers, 'people_make_simple_string');

  $new_rows = array();
  foreach ( $rows as $row ) {
    $new_cells = array();

    foreach ( $headers as $cell_name ) {
      $new_cell = $row[$cell_name];
      // Modify the text if needed
      if ($cell_name == "member") { $new_cell = $new_cell == 1 ? "yes" : ""; }
      $new_cells[] = $new_cell;
    }

    $new_rows[] = $new_cells;
    unset($new_cells);
  }

  return $new_rows;

} // function people_tablize_rows

function people_make_simple_string(&$string) {
  $string       = strtolower(trim($string));
  $patterns     = array('/ /', '/[^a-z0-9_]/');
  $replacements = array('_', '');
  $string = preg_replace( $patterns, $replacements, $string );
} // function people_make_simple_string

function people_admin_root() {
  return "";
} // function people_admin_root


/**
 * Configuration page for the people module
 **/

function people_admin_settings() {
  global $user;
  $username = $user->login;
  $form = array();
  $form["people_maxdisp_$username"] = array(
    '#type' => 'textfield',
    '#title' => t('Entries per page'),
    '#default_value' => variable_get("people_maxdisp_$username", 75),
    '#size' => 4,
    '#maxlength' => 4,
    '#description' => t('The maximum number of people per page'),
    '#required' => TRUE,
  );

  return system_settings_form($form);
}
// no closing "?\>" tag because this is a drupal module!